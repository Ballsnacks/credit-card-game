import sys
from random import *
import time
import os
os.system('color') # apparently this makes colors work for windows users

main = ""
cvc = ""
date = ""
margin = " "*8
seconds = ""

def print_card():
    global main, date, cvc

    cl = str(16 + randint(0,5) * 36 + randint(0, 26)) # magic values to make sure the colours are on the darker side
    cbg = u"\u001b[48;5;" + cl + "m" # colored background
    ctx = u"\u001b[38;5;" + cl + "m" # colored text (for the corners)
    cd = u"\u001b[0m" # default color
    cch = u"\u001b[48;5;136m"
    print(margin + ctx + u'\u259F' + cd + cbg +" "*26 + cd + ctx + u'\u2599' + cd)
    print(margin + cbg + " "*28 + cd)
    print(margin + cbg + "                CVC: " + cvc + "    " + cd)
    print(margin + cbg + " "*3 + cch + " "*4 + cbg + " "*21 + cd)
    print(margin + cbg + " "*28 + cd)
    print(margin + cbg + "   "+ main + "      " + cd)
    print(margin + cbg + "   Foo Bar       "+ date + "      " + cd)
    print(margin + ctx + u'\u259C' + cd + cbg +" "*26 + cd + ctx + u'\u259B' + cd)
    print(margin + "")


def ask():
    global main, date, cvc, seconds
    print(margin + " "*7 + "Memorize this!")
    print("")

    main = ""

    # add numbers that start with zero
    for i in range(4):
        main += str(randint(1000,9999))
        if i < 3: main += "-"

    cvc = str(randint(100, 999))

    expires_day = randint(1, 12)
    if expires_day < 10:
        expires_day = "0" + str(expires_day)
    date  = str(expires_day) + "/" + str(randint(20, 28))


    sys.stdout.write("\r")
    print_card()
    if seconds != "":
        for remaining in range(seconds, 0, -1):
            sys.stdout.write("\r")
            sys.stdout.write(margin + "    {:2d} seconds remaining.".format(remaining))
            sys.stdout.flush()
            time.sleep(1)
    else:
        input(margin + "Press Enter when you're done!")
    os.system('cls' if os.name == 'nt' else "printf '\033c'")

    #or let person decide when they're ready


def calc_score(a, b, date=False):
    score = 0
    if date:
        if a[0:2] == b[0:2]:
            score += 2
        if a[3:5] == b[3:5]:
            score += 2
    else:
        for i in range(min(len(a), len(b))):
            if a[i] != "-" or a[i] == "/":
                if a[i] == b[i]:
                    score += 1

    return score



def guess():
    global main, date, cvc

    for i in range(4):
        print("")

    guess_main = input(margin + "What was the credit card number? \n" + margin + "Format: xxxx-xxxx-xxxx-xxxx\n")
    score_main = calc_score(guess_main, main)
    if guess_main == main:
        print("omg you got it right!")
    elif score_main > 0:
        print("almost - it was " + main + ", but you got " + str(score) + " digits right!")
    else:
        print("sorry! it was " + main)
    print("")

    guess_cvc = input("What was the CVC?\nFormat: xxx\n")
    score_cvc = calc_score(guess_cvc, cvc)
    if guess_cvc == cvc:
        print("well done!")
    elif score_cvc > 0:
        print("it was " + cvc + ", but you got " + str(score) + " digits right!")
    else:
        print("sorry! it was " + cvc)
    print("")

    guess_date = input("What was the expiry date?\nFormat: xx/xx\n")
    score_date = calc_score(guess_date, date, date=True)
    if guess_date == date:
        print("oh hey, nice job!")
    elif score_date > 0:
        print("it was " + date + ", but you got " + str(score) + " digits right!")
    else:
        print("sorry! it was " + date)

    print("")
    print("Score for this round: " + str(int((score_main + score_cvc + score_date)/22*100)) + "%")

    print("To set a time limit for a round, just run 'python3 credit_card.py [seconds]'!")
    play_again = input("Press Enter to play again - or 'q' to quit!")
    if play_again == "q":
        print("See you again soon :-)")
    else:
        play()


def play():
    global seconds
    os.system('cls' if os.name == 'nt' else "printf '\033c'")
    if len(sys.argv) > 1:
        seconds = int(sys.argv[1])
    for i in range(4):
        print("")

    ask()
    guess()

if __name__ ==  "__main__":
    play()

    # use command line arguments to limit time
    # command line argument that changes time

